% SCRIPT to plot Proximal PAS Usage vs. Inter-PAS Distance
% GENERALIZED to sweep over any chosen global factor
% UPDATED with robust flux-based probability calculation

clear all;
close all;
clc;

% --- CONFIGURATION: CHOOSE THE PARAMETER TO SWEEP ---
sweep_param_name = 'kHoff';

switch sweep_param_name
    case 'E_total'
        sweep_param_values = [10000, 30000, 70000, 100000, 120000, 150000];
    case 'k_e' % Elongation rate
        sweep_param_values = [45/100, 65/100, 85/100];
    case 'kc' % Termination/cleavage rate
        sweep_param_values = [0.01, 0.05, 0.1, 0.2];
    case 'kHoff'
        sweep_param_values = [0.001, 0.01, 0.1, 1, 5, 10];
    otherwise
        error('Selected sweep parameter is not defined in the switch-case block.');
end

% --- BASE PARAMETERS ---
P.k_in = 2; P.k_e = 65/100; P.k_e2 = 30/100; P.E_total = 70000;
P.Pol_total = 70000; P.kEon = 0.00025; P.kEoff = 10; P.kHon = 0.2;
P.kHoff = 0.0125; P.kc = 0.05; P.kPon_min = 0.01; P.kPon_max = 1;
P.kPoff_const = 1; P.kPoff_max = 2; P.kPoff_min = 0.1; P.L_a = 100;
P.geneLength_bp = 25000; P.PASposition = 20000; EBindingNumber = 3;

% --- SIMULATION SETUP ---
inter_pas_distances_bp = 0:100:2500;
proximal_usage_results_cdf = zeros(length(inter_pas_distances_bp), length(sweep_param_values));

% --- PARAMETER SWEEP LOOP ---
fprintf('Starting sweep over parameter: %s\n', sweep_param_name);
for p_idx = 1:length(sweep_param_values)
    P_run = P;
    P_run.(sweep_param_name) = sweep_param_values(p_idx);
    fprintf('Running simulation for %s = %.3g...\n', sweep_param_name, sweep_param_values(p_idx));

    %%-- MODIFIED SECTION START --%%
    
    % Run the simulation to get the final steady-state concentrations
    [R_sol, REH_sol] = run_termination_simulation(P_run, EBindingNumber);

    % --- NEW CALCULATION: Flux-based CDF of Proximal Site Usage ---
    
    % 1. Calculate the total outflux from each pathway
    flux_cleavage_per_node = P_run.kc * REH_sol;
    total_cleavage_flux    = sum(flux_cleavage_per_node);
    flux_R_exit            = P_run.k_e * R_sol(end);
    flux_REH_exit          = P_run.k_e2 * REH_sol(end);
    total_outflux          = total_cleavage_flux + flux_R_exit + flux_REH_exit;
    
    % 2. Calculate the Cumulative Distribution Function (CDF) of cleavage events
    if total_cleavage_flux > 0
        cumulative_cleavage_flux = cumsum(flux_cleavage_per_node);
        % Normalize by the total cleavage flux to get the CDF of termination events
        termination_cdf = cumulative_cleavage_flux / total_cleavage_flux;
    else
        % If there is no cleavage, the CDF is zero everywhere
        termination_cdf = zeros(size(REH_sol));
    end

    % 3. Interpolate the CDF to the desired distances for plotting
    nodes_post_pas = 0:(length(REH_sol)-1);
    bp_post_pas = nodes_post_pas * P_run.L_a;
    
    % Ensure the last point of the CDF is exactly 1.0 for interpolation
    bp_post_pas_interp = [bp_post_pas, bp_post_pas(end)+1];
    termination_cdf_interp = [termination_cdf', 1.0];
    
    proximal_usage_results_cdf(:, p_idx) = interp1(bp_post_pas_interp, termination_cdf_interp, inter_pas_distances_bp, 'linear', 'extrap');

    %%-- MODIFIED SECTION END --%%
end
disp('All simulations complete.');

% --- PLOT THE RESULTS ---
figure('Position', [100, 100, 800, 600]);
hold on;
colors = lines(length(sweep_param_values));

for p_idx = 1:length(sweep_param_values)
    plot(inter_pas_distances_bp, proximal_usage_results_cdf(:, p_idx) * 100, ...
         'LineWidth', 2.5, 'Color', colors(p_idx,:), ...
         'DisplayName', sprintf('%s = %.3g', strrep(sweep_param_name, '_', '\_'), sweep_param_values(p_idx)));
end

plot_title = sprintf('CDF of Proximal PAS Usage vs. %s (EBindingNumber=%d)', strrep(sweep_param_name, '_', ' '), EBindingNumber);
xlabel('Inter-PAS Distance (bp)', 'FontSize', 12);
ylabel('Cumulative Proximal Site Usage (%)', 'FontSize', 12);
title(plot_title, 'FontSize', 14, 'FontWeight', 'bold');
grid on; legend('show', 'Location', 'best'); set(gca, 'FontSize', 10); box on;
ylim([0 100]);


%% --- Helper function to run the simulation ---
function [R_sol, REH_sol] = run_termination_simulation(P, EBindingNumber)
    % This function now returns the full solution vectors for flux analysis.
    global N PAS N_PAS Ef_ss;
    syms Ef real;
    
    L_a = P.L_a; N = floor(P.geneLength_bp / L_a); PAS = floor(P.PASposition / L_a); N_PAS = N - PAS + 1;
    kHon_base = P.kHon;
    
    [r_E_BeforePas] = compute_steady_states(P, EBindingNumber + 1);
    kPon_vals = linspace(P.kPon_min, P.kPon_max, PAS);
    RE_vals = sym(zeros(EBindingNumber + 1, N));
    for e = 1:EBindingNumber + 1
        for idx = 1:length(kPon_vals); RE_vals(e, idx) = subs(r_E_BeforePas(e), {'kPon', 'kPoff'}, {kPon_vals(idx), P.kPoff_const}); end
        for idx = PAS+1:N; RE_vals(e, idx) = subs(r_E_BeforePas(e), {'kPon', 'kPoff'}, {P.kPon_max, P.kPoff_min}); end
    end
    P.RE_val_bind_E = matlabFunction(simplify(sum(sym(1:EBindingNumber)' .* RE_vals(2:end, :), 1)), 'Vars', {Ef});

    X_guess = 1e-6 * ones(N + N_PAS, 1);
    options = optimoptions('fsolve', 'Display', 'off', 'FunctionTolerance', 1e-8);

    P.FirstRun = true; P.is_unphysical = false; Ef_ss = 0;
    try; X_base = fsolve(@(xx) ode_dynamics_multipleE(xx, P), X_guess, options);
    catch; error('Solver failed in Step 1.'); end
    if P.is_unphysical; error('Solver returned unphysical result in Step 1.'); end

    avg_E_bound = P.RE_val_bind_E(Ef_ss);
    P.FirstRun = false; P.kHon = kHon_base * avg_E_bound(end);
    X_final = fsolve(@(xx) ode_dynamics_multipleE(xx, P), X_base, options);
    
    R_sol = X_final(1:N);
    REH_sol = X_final(N+1 : N+N_PAS);
end